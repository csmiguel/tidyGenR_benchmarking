[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tidyGenR benchmarking",
    "section": "",
    "text": "Attach libraries:"
  },
  {
    "objectID": "index.html#benchmarking-tidygenr",
    "href": "index.html#benchmarking-tidygenr",
    "title": "tidyGenR benchmarking",
    "section": "Benchmarking tidyGenR",
    "text": "Benchmarking tidyGenR\nThis repository accompanies the R package tidyGenR available at https://github.com/csmiguel/tidyGenR. It covers (1) all steps for genotype calling with tidyGenR, (2) exploration of the parameters for variant calling, and (3) comparison of tidyGenR against AmpliSAS. It uses real data from a population genetics study of the wild rodent Rattus baluensis (Camacho-Sanchez et al. in preparation)."
  },
  {
    "objectID": "index.html#preparation-of-input-data",
    "href": "index.html#preparation-of-input-data",
    "title": "tidyGenR benchmarking",
    "section": "Preparation of input data",
    "text": "Preparation of input data\nRaw sequences are deposited in NCBI under the BioStudy SRP293699, in the BioProject PRJNA680166. From the BioStudy, we can download the SRA metadata to mapping later sample IDs to SRRs.\n\n# table with mapped SRR-sampleIDs\nsrr <-\n  read.csv(\"data/raw/SraRunTable.csv\") |>\n  select(Run, \"Sample.Name\") |>\n  rename(run = Run,\n         sample = \"Sample.Name\")\nknitr::kable(head(srr, 3))\n\n\n\n\nrun\nsample\n\n\n\n\nSRR13106799\nBOR1063\n\n\nSRR13106800\nBOR1061\n\n\nSRR13106802\nBOR626\n\n\n\n\n\nRaw FASTQ reads from the SRRs can be downloaded with SRA-toolkit. Then, they are renamed based on the data/raw/SraRunTable.csv mapping file.\n\n# download raw reads from NCBI\n# they are not downloaded if already present in 'data/raw'.\ninvisible(\n  apply(srr, 1, function(x) {\n  # name paths\n  srr_path <- file.path(\"data/raw\", x[1])\n  srr1 <- file.path(\"data/raw\", paste0(x[1], \"_1.fastq\"))\n  srr2 <- file.path(\"data/raw\", paste0(x[1], \"_2.fastq\"))\n  sam1 <- file.path(\"data/raw\", paste0(x[2], \"_1.fastq\"))\n  sam2 <- file.path(\"data/raw\", paste0(x[2], \"_2.fastq\"))\n  # fetch SRR\n  if (!any(dir.exists(srr_path) || file.exists(sam1))) {\n    system2(\"prefetch\", paste(\"-O\", \"data/raw/\", x[1]))\n  }\n  if (!file.exists(sam1)) {\n  # reformat to FASTQ\n    system2(\"fasterq-dump\", paste(\"-O\", \"data/raw/\", srr_path))\n  # rename SRR with sample codes\n    system2(\"mv\", paste(srr1, sam1))\n    system2(\"mv\", paste(srr2, sam2))\n    # rm SRR\n    system2(\"rm\", paste0(\"-r \", srr_path, \"*\"))\n  }\n  })\n  )\n\nList some of the downloaded files:\n\nlist.files(\"data/raw\", pattern = \"fastq\", full.names = TRUE)[1:3]\n\n[1] \"data/raw/BOR1061_1.fastq\" \"data/raw/BOR1061_2.fastq\"\n[3] \"data/raw/BOR1063_1.fastq\"\n\n\nCheck input raw fastq:\n\nfreads <- list.files(\"data/raw\", pattern = \"1.fastq\",\n                    full.names = TRUE)\nrreads <- list.files(\"data/raw\", pattern = \"2.fastq\",\n                    full.names = TRUE)\nchr <- check_raw_reads(freads, rreads, low_readcount = 10)\n\nAll F and (R files) passed check on number of reads above 10.\n\n\nSample names are unique.\n\n\nAll F files have their corresponding R file.\n\n\nInput FASTQ complies with expected input for tidyGenR. A total of 44 samples are detected:\n\nchr$samples\n\n [1] \"BOR1061\" \"BOR1063\" \"BOR1069\" \"BOR1070\" \"BOR1071\" \"BOR1074\" \"BOR1075\"\n [8] \"BOR1076\" \"BOR1077\" \"BOR1079\" \"BOR1080\" \"BOR1082\" \"BOR1086\" \"BOR1088\"\n[15] \"BOR1090\" \"BOR1091\" \"BOR1097\" \"BOR1098\" \"BOR1101\" \"BOR1107\" \"BOR1111\"\n[22] \"BOR1113\" \"BOR1115\" \"BOR1125\" \"BOR1127\" \"BOR1129\" \"BOR1131\" \"BOR1133\"\n[29] \"BOR1135\" \"BOR1137\" \"BOR1139\" \"BOR1141\" \"BOR1143\" \"BOR1147\" \"BOR1149\"\n[36] \"BOR1151\" \"BOR1155\" \"BOR614\"  \"BOR615\"  \"BOR616\"  \"BOR618\"  \"BOR619\" \n[43] \"BOR621\"  \"BOR626\""
  },
  {
    "objectID": "index.html#demultiplex-by-locus",
    "href": "index.html#demultiplex-by-locus",
    "title": "tidyGenR benchmarking",
    "section": "Demultiplex by locus",
    "text": "Demultiplex by locus\nReads are demultiplexed by locus using primer sequences in paired-end mode.\n\n# load primer data\ndata(\"primers\")\n# path to cutadapt\ncutadapt <- system(\"which cutadapt\", intern = TRUE)\n# path to folder save locus-demultiplexed FASTQ\ndemult <- \"data/intermediate/demultiplexed\"\n# print primers\nknitr::kable(head(primers, 3))\n\n\n\n\nlocus\nfw\nrv\n\n\n\n\nnfkbia\nGCCTCCAAACACACAGTCAT\nTGAGGAGAGCTATGACACGG\n\n\nchrna9\nTTATCTGGGAGAGCGTGACC\nTTGGGAAARGATGAACCGGC\n\n\nrogdi\nAGAARCCGGCTCACTACCC\nGAGGCACAGCTTGTTGAGG\n\n\n\n\n\n\n# demultiplex\ndemultiplex(\n  interpreter = \"/bin/bash\",\n  cutadapt = cutadapt,\n  freads = freads,\n  rreads = rreads,\n  primers = primers,\n  sh_out = \"code/demultiplex.sh\",\n  write_demultiplexed = demult,\n  log_out = c_log,\n  mode = \"pe\",\n  run = TRUE)\n\nGlimpse demultiplexed FASTQ:\n\nlist.files(demult, pattern = \"fastq\", full.names = TRUE)[1:3]\n\n[1] \"data/intermediate/demultiplexed/BOR1061.abcg8.1.fastq.gz\" \n[2] \"data/intermediate/demultiplexed/BOR1061.abcg8.2.fastq.gz\" \n[3] \"data/intermediate/demultiplexed/BOR1061.alkbh7.1.fastq.gz\"\n\n\nRemove files with few reads:\n\nremove_poor_fastq(demult,\n                   min_reads = 10)\n\nMake sequence-quality reports using FastQC and MultiQC. Instead of running it over the >2000 demultiplexed files, it will be run over 100 random files.\n\n# instead of running fastqc to all files > 2000, I run\n#    it on 100 random files.\ndem_files <-\n  list.files(demult, \"fastq.gz\", full.names = TRUE)\n# select 100 random files\nrandom_dem <-\n  sample(dem_files, 100, replace = FALSE)\n# copy to temp dir\ntemp_dem <- file.path(tempdir(), \"dem\")\ndir.create(temp_dem)\nfile.copy(from = random_dem, to = temp_dem)\n# run fastqc\nsystem2(\"fastqc\",\n        paste(\"--noextract -o\",\n              temp_dem,\n              paste0(temp_dem, \"/*fastq.gz\")))\n\n# run multiqc\nsystem2(\"multiqc\",\n        paste(\"-o output\", temp_dem))"
  },
  {
    "objectID": "index.html#truncate-reads",
    "href": "index.html#truncate-reads",
    "title": "tidyGenR benchmarking",
    "section": "Truncate reads",
    "text": "Truncate reads\nReads are truncated to a given length for each locus. The truncation lengths depend on the sequence qualities for forward and reverse reads. After per-base sequence-qualities in the output/multiqc_report.html, 270 nt for forward reads and 180 for reverse reads seem reasonable truncation lengths. For some loci, specific truncation lengths were set to maximize the number of reads returned. That is, a data.frame with truncation lengths for forward and reverse reads was built to maximize the amount of information yielded by each locus. For instance, the amplicons for some loci, as nfkbia, are long and it is a good trade-off to keep the low quality ends but to be sure both F and R reads overlap.\nA data.frame with locus-specific truncation lengths was built.\n\n\nCode\nloci <- \n  tidyGenR:::check_names_demultiplexed(demult,\n                                     fw_pattern = \"1.fastq.gz\",\n                                     rv_pattern = \"2.fastq.gz\")$loci\n\ntrunc_fr <-\n  data.frame(locus = loci,\n             trunc_f = 270,\n             trunc_r = 180)\n# introduce manual values\ntrunc_fr[which(loci == \"rgd735029\"), \"trunc_f\"] <-  245\ntrunc_fr[which(loci == \"rgd735029\"), \"trunc_r\"] <-  155\ntrunc_fr[which(loci == \"fancg\"), \"trunc_r\"] <- 190\ntrunc_fr[which(loci == \"nfkbia\"), \"trunc_r\"] <- 240\ntrunc_fr[which(loci == \"tmem87a\"), \"trunc_r\"] <- 160\n\n# glimpse data.frame with locus-specific truncation lengths\nknitr::kable(head(trunc_fr, 3))\n\n\n\n\n\nlocus\ntrunc_f\ntrunc_r\n\n\n\n\nabcg8\n270\n180\n\n\nalkbh7\n270\n180\n\n\napeh17\n270\n180\n\n\n\n\n\nTruncate reads according to locus-specific truncation lengths:\n\ntr_dir <- \"data/intermediate/truncated\"\n\n\n# truncate\ntrunc_out <-\n  trunc_amp(in_dir = demult,\n          fw_pattern = \"1.fastq.gz\",\n          rv_pattern = \"2.fastq.gz\",\n          trunc_fr = trunc_fr,\n          write_trun = tr_dir,\n          max_ee = c(4, 5),\n          trunc_q = 2)\n# save reads in and out\nsaveRDS(trunc_out, tr_path)\n\nThe output from trunc_amp() is a list of matrices with IN and OUT reads after truncation.\n\n\n\n\n# see trunc_out\nlapply(trunc_out[seq_len(3)], head, 3)\n\n$abcg8\n        reads.in reads.out\nBOR1061     1716      1039\nBOR1063     1616       992\nBOR1069     1634       961\n\n$alkbh7\n        reads.in reads.out\nBOR1061      546       398\nBOR1063      499       361\nBOR1069      546       374\n\n$apeh17\n        reads.in reads.out\nBOR1061     3719      2773\nBOR1063     3761      2793\nBOR1069     3756      2838\n\n\nTruncated FASTQ with low number of reads can be removed:\n\nremove_poor_fastq(tr_dir,\n                   min_reads = 10)\n\n2376 files have been KEPT.\n0 files REMOVED:"
  },
  {
    "objectID": "index.html#exploration-of-the-parameter-space",
    "href": "index.html#exploration-of-the-parameter-space",
    "title": "tidyGenR benchmarking",
    "section": "Exploration of the parameter space",
    "text": "Exploration of the parameter space\nThe function explore_dada() can be used to explore the effect of some DADA2 parameters (“OMEGA_A”, “BAND_SIZE”, “pool”) on the sensitivity on the variant calling.\n\nomega_a: threshold for variants to be significant overabundant log(-log(birth_pval)) (see Rosen et al. 2012).\nband_size: positive numbers set a band size in Needleman-Wunsch alignments and ends free alignment is performed. A value of zero turns off banding, triggering full Needleman-Wunsch alignments, in which gapless alignment is performed (see issue).\npool: calling variants pooling samples can increase sensitivity (see dicussion).\n\nThe returned plots can be used to guide the selection of the best OMEGA_A in variant_call(), or frequency (maf) and abundance thresholds (ad) for filtering variants.\nExplore variants:\n\n# declare candidate OMEGA_A to use in variant_call()\ncandidate_omega_a <- 10^-2\n\n\n# paths to forward and reverse truncated reads\nftrun <-\n  list.files(tr_dir, pattern = \"_F_\", full.names = T)\nrtrun <-\n  list.files(tr_dir, pattern = \"_R_\", full.names = T)\n# candidate omega value to annotate vline in plots.\nv_line <- log(-log(candidate_omega_a))\n# run explore_dada() with band_size = 0, non pooling and omega_a = 0.9\n# forward\nF_ind_0 <-\n  explore_dada(ftrun, band_size = 0, vline = v_line, hline_fr = 0.1)\n# reverse\nR_ind_0 <-\n  explore_dada(rtrun, band_size = 0, vline = v_line, hline_fr = 0.1)\n# save results\nsaveRDS(list(F_ind_0 = F_ind_0, R_ind_0 = R_ind_0), x_out_path)\n\nExploration of DADA2 clustering for forward (A, C) and reverse (B, D) reads in Figure 1. The Y-axis represents the frequency of the variant in each locus and sample. The log(-log(birth_pval)) transformation in the X-axis is related to the p-value of a variant being significantly overabundant. Larger x-values represent likely true variants. For representation purposes birth_pval of 0 (thus negative infinite), are converted to 10. Points are color-coded according to the variant rank in read abundance for its given locus and sample. For diploid individuals, green are likely true variants and red are likely false variants. Grey dashed lines are thresholds used for variant_call():\n\n\n\n\n\nCode\nppool <-\n  (F_ind_0$p1 | R_ind_0$p1) / (F_ind_0$p2 | R_ind_0$p2) +\n  patchwork::plot_annotation(title = \"Dada F/R pool = F, omega_a 0.9, band_size = 0\",\n                             tag_levels = \"A\")\n# save plot with combined loci\nggsave(\"output/explore_dada.pdf\", ppool, width = 8, height = 5)\n# print plot\nppool\n\n\n\n\n\nFigure 1: Exploration of DADA2 variants.\n\n\n\n\nAfter the exploration variants in Figure 1, it seems an OMEGA_A = 0.01, implying a cut-off of 1.53 in the X-axis and a frequency threshold (Y-axis) of 0.1, excludes most artifacts while maximizing true positives.\nThe results can also be explored per-locus. For instance, Figure 1 B can be expanded per locus in Figure 2.\n\n\nCode\n# list of plots per locus\nlplots <-\n  list(loci_f_ind_0_logp = F_ind_0$p3,\n       loci_r_ind_0_logp = R_ind_0$p3,\n       loci_f_ind_0_abun = F_ind_0$p4,\n       loci_r_ind_0_abun = R_ind_0$p4)\n\n# save plots per locus\ninvisible(\n  lapply(seq_along(lplots), function(x) {\n  ggsave(paste0(\"output/\", names(lplots)[x], \".pdf\"),\n         lplots[[x]], width = 6, height = 6)\n  })\n  )\n\n\n\n\nCode\nlplots$loci_r_ind_0_logp\n\n\n\n\n\nFigure 2: Exploration of DADA2 variants per locus for R reads."
  },
  {
    "objectID": "index.html#variant-and-genotype-calling",
    "href": "index.html#variant-and-genotype-calling",
    "title": "tidyGenR benchmarking",
    "section": "Variant and genotype calling",
    "text": "Variant and genotype calling\nVariant calling is run using OMEGA_A = 0.01, and under different parameters:\n\nband_size: 0, 16\npool: TRUE, FALSE\n\n\n\n\nSamples are genotyped from variant data with defaults ploidy = 2 and ADt = 10:\n\ngenotypes_x <-\n  lapply(variants_x, genotype)"
  },
  {
    "objectID": "index.html#tidy-data",
    "href": "index.html#tidy-data",
    "title": "tidyGenR benchmarking",
    "section": "Tidy data",
    "text": "Tidy data\nA strength from tidyGenR is that variants and genotypes from variant_call() and genotype() are returned as tidy tables: one row per observation and variables in columns. Lets have a look at the data structure.\n\n# glimpse tidy variants\nknitr::kable(head(variants_x$ind_bs0))\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample\nlocus\nvariant\nreads\nnt\nmd5\nsequence\n\n\n\n\nBOR1061\nabcg8\n01\n1028\n390\nc3eab42bea56937040aa79a6bbea2724\nTTGCCCACCCTGTTCATCCATGGAGCAGAAGCCTGCCTGATGTCTCTCATCATTGGCTTCCTTTACTACGGCCACGCAGATAAGCCGCTCTCCTTCGTGGACATGGCAGCCCTCCTGTTCATGATAGGAGCGCTCATTCCTTTTAATGTCATTCTGGATGTCGTCTCCAAATGTGAGTGTCACCCGCCCTCCTCACCAGACATCGGGACAGTGGGACAGCCTCCCTGGGCACTGCACTGAGGCCAAGCTCTGTGCTTCCGCTGGTACCCACGGCATTACAAGAGATGCGACCTCAGTAACACTCTTCGCTCATTCACCTCCCTCTCCCCCATCTCCAGGTCACTCGGAGCGCTCGCTGCTGTACTATGAACTGGAGGACGGACTGTACAC\n\n\nBOR1061\nalkbh7\n1\n393\n390\n620057f2e547e688d1220db91a3a1d01\nGCCTTCCTGGCCCCATCCCCTCTGGGAGGGAGCGGCAAATCACTGAGATGCGTCGGCCCCGGGGGACCCGGTGAGCCCCAAAAAATGATTCTTCATCTCTAAGGATCTCATGGGAGAAGTCATATCGGGCTGAACCCCTGCAAGAAAATAAAGGCCAAGTAGGTGAAGGGAGGGAAGTCTGTCCCTTCATCATTTCTGTACTTTATCTGGGTAGTGGTGATGGTGACTTCCTCTGCTATGAGAGCAGAAACAAGAGCTGTTGGAAACACTTGGCCTCATCTGGGGGTTCTAGGCTAGGTCATACCTTAGGATATAGAGAGAACCAGGTTCCAGCAACAGTTCCAGCCACTGCTCAGGTTCCTGTGTATGAACCAGCTTCATAACACTTGG\n\n\nBOR1061\napeh17\n1\n2747\n415\n394a483d3ae2ce5605f1674b2400986c\nAAAGCCAGTGGAGCCACGATAGTTCACTGCAAGTGAGACAAGATAGTCGGGCAATGTTCTCAGTCCCCAACCCAATTCCATGTGTCTGTGACATAGGCCCTAGGACCAGCTGCATCACGTGCTGTCAAGGGGAGGTAGCCAAGAGAGATGAAGCTGCTACCCTGAGACCACAGCATCCTTTCCACAGAAGCTTCAAGTTAATCCACGTGATCACCAGGTTATGAAGCCAGAGGCTAAGCCAGGGCAATTTCTAGTAGTAGTTTCTTTTTGTTTTCAAAACAGGGTTTTTCTGTGCAGTCCTGGATGATCTTGGACTCAAACCTTCACCTGCCTCTGCCTCCTAAGTGCTGGATTAAAGGAGTGTGCCCCCATTGCCCAGCCCGTTTCTAAAGAGTAAGTACACCATAGAAAAGCA\n\n\nBOR1061\ncd27\n01\n1143\n379\na897a500c934797d4b3662415fc92456\nAGTCTTCCTGGATAGGGATGACGCTGCCCTCCTCCTCCCTGGGGCAGCTGTAAGGACAAAGCTCTTCAGGTACTGCCTGGCTATCTTCATCTGTGCAAAGACAATTAGCCAAGTGTTGGTCAGCAGTGGAGAGAAGAGAGGGGAAGGTGAGGAGAGAGGAGAAGGCCGAGTGGAGGCTGGGGCATGGGGGAGCCAGGGGAGCCTGTGGGAAGGACACTTGAAGAACCAGAGAAGGTGGGTGAAGGTGGGATGGGGGCTTTAGGTGTGGGTGGCAGAGCTGAGAGGGCAGGAGGGAAGGCCTGTGCCTTACTTGGCCCGTGATTTCTTCTTTGACGGAAGAACAAGATCCCACCCAGGACGAAGACAAGAAGCATGCTGG\n\n\nBOR1061\nchrna9\n01\n21\n408\n3d77c726462281336567895361ceebc1\nTGCAGTGTGACATTCAGCACCGCGTCCGTATCCTCGACTGGACGCAGAGCACTGGAGTAGTCTTCAAAAAGATCGCTGAACAATTTCTGAGCATATTTCCCATTTGCTGTCTCTACGGCTGTTCAAAGAGAAGCACCCGGATGGGCATTTCAAAACAAGACCAACTCTGGGGTCAAAATGGGGGATGGCAACTTTGGATGAGTTCTTTTTTGGGGGCAGGGGACTGGTCTTACCTACCTTGATGATCGAGAGTCAGAAAGAGGTGCGAGCACGCCCATGTACTCACGTCAGTCCTCCTGTCTCTCTCACCAAGGCTCTAAGGAGCCTCTATGGAGCACTGCGCTAGCCCCTCACCTCTGATTCCAGAAGCAGCAAAATACATCCAGCAAAAGGAGATGCAGGACTGGG\n\n\nBOR1061\nchrna9\n02\n27\n408\n9b805048a29d6233f1ac41f2a6aa1421\nTGCAGTGTGACATTCAGCACCGCGTCCGTATCCTCGACTGGACGCAGAGCACTGGAGTAGTCTTCAAAAAGATCGCTGAATAATTTCTGAGCATATTTCCCATTTGCTGTCTCTACGGCTGTTCAAAGAGAAGCACCCGGATGGGCATTTCAAAACAAGACCAACTCTGGGATCAAAATGGGGGATGGCAACTTTGGATGAGTTCTTTTTTGGGGGCAGGGGACTGGTCTTACCTACCTTGATGATCAAGAGTCAGAAAGAGGTGCGAGCACGCCCATGTACTCACGTCAGTCCTCCTGTCTCTCTCACCAAGGCTCTAAGGAGCCTCTATGGAGCACTGCGCTAGCCCCTCACCTCTGATTCCAGAAGCAGCAAAATACATCCAGCAAAAGGAGATGCAGGACTGGG\n\n\n\n\n\n\n# glimpse tidy genotypes\nknitr::kable(head(genotypes_x$ind_bs0))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample\nlocus\nallele\nallele_no\nreads\nnt\nmd5\nsequence\n\n\n\n\nBOR1061\nabcg8\n01\n1\n514.0\n390\nc3eab42bea56937040aa79a6bbea2724\nTTGCCCACCCTGTTCATCCATGGAGCAGAAGCCTGCCTGATGTCTCTCATCATTGGCTTCCTTTACTACGGCCACGCAGATAAGCCGCTCTCCTTCGTGGACATGGCAGCCCTCCTGTTCATGATAGGAGCGCTCATTCCTTTTAATGTCATTCTGGATGTCGTCTCCAAATGTGAGTGTCACCCGCCCTCCTCACCAGACATCGGGACAGTGGGACAGCCTCCCTGGGCACTGCACTGAGGCCAAGCTCTGTGCTTCCGCTGGTACCCACGGCATTACAAGAGATGCGACCTCAGTAACACTCTTCGCTCATTCACCTCCCTCTCCCCCATCTCCAGGTCACTCGGAGCGCTCGCTGCTGTACTATGAACTGGAGGACGGACTGTACAC\n\n\nBOR1061\nabcg8\n01\n2\n514.0\n390\nc3eab42bea56937040aa79a6bbea2724\nTTGCCCACCCTGTTCATCCATGGAGCAGAAGCCTGCCTGATGTCTCTCATCATTGGCTTCCTTTACTACGGCCACGCAGATAAGCCGCTCTCCTTCGTGGACATGGCAGCCCTCCTGTTCATGATAGGAGCGCTCATTCCTTTTAATGTCATTCTGGATGTCGTCTCCAAATGTGAGTGTCACCCGCCCTCCTCACCAGACATCGGGACAGTGGGACAGCCTCCCTGGGCACTGCACTGAGGCCAAGCTCTGTGCTTCCGCTGGTACCCACGGCATTACAAGAGATGCGACCTCAGTAACACTCTTCGCTCATTCACCTCCCTCTCCCCCATCTCCAGGTCACTCGGAGCGCTCGCTGCTGTACTATGAACTGGAGGACGGACTGTACAC\n\n\nBOR1061\nalkbh7\n1\n1\n196.5\n390\n620057f2e547e688d1220db91a3a1d01\nGCCTTCCTGGCCCCATCCCCTCTGGGAGGGAGCGGCAAATCACTGAGATGCGTCGGCCCCGGGGGACCCGGTGAGCCCCAAAAAATGATTCTTCATCTCTAAGGATCTCATGGGAGAAGTCATATCGGGCTGAACCCCTGCAAGAAAATAAAGGCCAAGTAGGTGAAGGGAGGGAAGTCTGTCCCTTCATCATTTCTGTACTTTATCTGGGTAGTGGTGATGGTGACTTCCTCTGCTATGAGAGCAGAAACAAGAGCTGTTGGAAACACTTGGCCTCATCTGGGGGTTCTAGGCTAGGTCATACCTTAGGATATAGAGAGAACCAGGTTCCAGCAACAGTTCCAGCCACTGCTCAGGTTCCTGTGTATGAACCAGCTTCATAACACTTGG\n\n\nBOR1061\nalkbh7\n1\n2\n196.5\n390\n620057f2e547e688d1220db91a3a1d01\nGCCTTCCTGGCCCCATCCCCTCTGGGAGGGAGCGGCAAATCACTGAGATGCGTCGGCCCCGGGGGACCCGGTGAGCCCCAAAAAATGATTCTTCATCTCTAAGGATCTCATGGGAGAAGTCATATCGGGCTGAACCCCTGCAAGAAAATAAAGGCCAAGTAGGTGAAGGGAGGGAAGTCTGTCCCTTCATCATTTCTGTACTTTATCTGGGTAGTGGTGATGGTGACTTCCTCTGCTATGAGAGCAGAAACAAGAGCTGTTGGAAACACTTGGCCTCATCTGGGGGTTCTAGGCTAGGTCATACCTTAGGATATAGAGAGAACCAGGTTCCAGCAACAGTTCCAGCCACTGCTCAGGTTCCTGTGTATGAACCAGCTTCATAACACTTGG\n\n\nBOR1061\napeh17\n1\n1\n1373.5\n415\n394a483d3ae2ce5605f1674b2400986c\nAAAGCCAGTGGAGCCACGATAGTTCACTGCAAGTGAGACAAGATAGTCGGGCAATGTTCTCAGTCCCCAACCCAATTCCATGTGTCTGTGACATAGGCCCTAGGACCAGCTGCATCACGTGCTGTCAAGGGGAGGTAGCCAAGAGAGATGAAGCTGCTACCCTGAGACCACAGCATCCTTTCCACAGAAGCTTCAAGTTAATCCACGTGATCACCAGGTTATGAAGCCAGAGGCTAAGCCAGGGCAATTTCTAGTAGTAGTTTCTTTTTGTTTTCAAAACAGGGTTTTTCTGTGCAGTCCTGGATGATCTTGGACTCAAACCTTCACCTGCCTCTGCCTCCTAAGTGCTGGATTAAAGGAGTGTGCCCCCATTGCCCAGCCCGTTTCTAAAGAGTAAGTACACCATAGAAAAGCA\n\n\nBOR1061\napeh17\n1\n2\n1373.5\n415\n394a483d3ae2ce5605f1674b2400986c\nAAAGCCAGTGGAGCCACGATAGTTCACTGCAAGTGAGACAAGATAGTCGGGCAATGTTCTCAGTCCCCAACCCAATTCCATGTGTCTGTGACATAGGCCCTAGGACCAGCTGCATCACGTGCTGTCAAGGGGAGGTAGCCAAGAGAGATGAAGCTGCTACCCTGAGACCACAGCATCCTTTCCACAGAAGCTTCAAGTTAATCCACGTGATCACCAGGTTATGAAGCCAGAGGCTAAGCCAGGGCAATTTCTAGTAGTAGTTTCTTTTTGTTTTCAAAACAGGGTTTTTCTGTGCAGTCCTGGATGATCTTGGACTCAAACCTTCACCTGCCTCTGCCTCCTAAGTGCTGGATTAAAGGAGTGTGCCCCCATTGCCCAGCCCGTTTCTAAAGAGTAAGTACACCATAGAAAAGCA"
  },
  {
    "objectID": "index.html#genotype-with-amplisat",
    "href": "index.html#genotype-with-amplisat",
    "title": "tidyGenR benchmarking",
    "section": "Genotype with AmpliSAT",
    "text": "Genotype with AmpliSAT\nGenotyping was also carried with AmpliSAT, a software written in PERL with similar characteristics to tidyGenR. To compare their performance we run AmpliSAT in a DOCKER container to genotype the same raw data. The steps are detailed here. AmpliSAS returns results in a multisheet EXCEL and in plain text files, one per locus. The function amplisas2tidy() permits to read plain text results from AmpliSAS into tidy variants.\nCreate input for AmpliSAS:\n\n# amplicon metadata\nsource(\"code/amplisas/01_create_amplicon_data.R\")\n# append barcodes to reads\nsource(\"code/amplisas/02_add_barcodes.R\")\n\nAmpliSAS is run in a DOCKER container. The steps are detailed here.\nAmpliSAS results can be read to tidy variants:\n\nfp <- list.files(\"data/intermediate/amplisas/results_amplisas/filtered\",\n                 pattern = \"txt$\",\n                 full.names = TRUE)\n# amplisas results to tidy variants\nvar_amplisas <-\n  amplisas2tidy(fp)\n\n# to genotypes\ngen_amplisas <-\n  genotype(var_amplisas)\nknitr::kable(head(var_amplisas, 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample\nlocus\nvariant\nreads\nnt\nmd5\nsequence\n\n\n\n\nBOR1061\nabcg8\n97168\n467\n390\nc3eab42bea56937040aa79a6bbea2724\nTTGCCCACCCTGTTCATCCATGGAGCAGAAGCCTGCCTGATGTCTCTCATCATTGGCTTCCTTTACTACGGCCACGCAGATAAGCCGCTCTCCTTCGTGGACATGGCAGCCCTCCTGTTCATGATAGGAGCGCTCATTCCTTTTAATGTCATTCTGGATGTCGTCTCCAAATGTGAGTGTCACCCGCCCTCCTCACCAGACATCGGGACAGTGGGACAGCCTCCCTGGGCACTGCACTGAGGCCAAGCTCTGTGCTTCCGCTGGTACCCACGGCATTACAAGAGATGCGACCTCAGTAACACTCTTCGCTCATTCACCTCCCTCTCCCCCATCTCCAGGTCACTCGGAGCGCTCGCTGCTGTACTATGAACTGGAGGACGGACTGTACAC\n\n\nBOR1061\nalkbh7\n62348\n185\n390\n620057f2e547e688d1220db91a3a1d01\nGCCTTCCTGGCCCCATCCCCTCTGGGAGGGAGCGGCAAATCACTGAGATGCGTCGGCCCCGGGGGACCCGGTGAGCCCCAAAAAATGATTCTTCATCTCTAAGGATCTCATGGGAGAAGTCATATCGGGCTGAACCCCTGCAAGAAAATAAAGGCCAAGTAGGTGAAGGGAGGGAAGTCTGTCCCTTCATCATTTCTGTACTTTATCTGGGTAGTGGTGATGGTGACTTCCTCTGCTATGAGAGCAGAAACAAGAGCTGTTGGAAACACTTGGCCTCATCTGGGGGTTCTAGGCTAGGTCATACCTTAGGATATAGAGAGAACCAGGTTCCAGCAACAGTTCCAGCCACTGCTCAGGTTCCTGTGTATGAACCAGCTTCATAACACTTGG\n\n\nBOR1061\napeh17\n81256\n1120\n415\n394a483d3ae2ce5605f1674b2400986c\nAAAGCCAGTGGAGCCACGATAGTTCACTGCAAGTGAGACAAGATAGTCGGGCAATGTTCTCAGTCCCCAACCCAATTCCATGTGTCTGTGACATAGGCCCTAGGACCAGCTGCATCACGTGCTGTCAAGGGGAGGTAGCCAAGAGAGATGAAGCTGCTACCCTGAGACCACAGCATCCTTTCCACAGAAGCTTCAAGTTAATCCACGTGATCACCAGGTTATGAAGCCAGAGGCTAAGCCAGGGCAATTTCTAGTAGTAGTTTCTTTTTGTTTTCAAAACAGGGTTTTTCTGTGCAGTCCTGGATGATCTTGGACTCAAACCTTCACCTGCCTCTGCCTCCTAAGTGCTGGATTAAAGGAGTGTGCCCCCATTGCCCAGCCCGTTTCTAAAGAGTAAGTACACCATAGAAAAGCA"
  },
  {
    "objectID": "index.html#compare-results",
    "href": "index.html#compare-results",
    "title": "tidyGenR benchmarking",
    "section": "Compare results",
    "text": "Compare results\ncompare_calls() was used for comparing results of tidyGenR run with different sets of parameters between them and agains AmpliSAT results. The comparison indicates that the set of parameters that returns the most similar genotype calls to AmpliSAT is using a band size = 0.\n\n# compare genotypes of the four runs plus amplisat\n#   genotypes\ngen_comb <-\n  c(genotypes_x,\n    list(gen_amplisas))\nnames(gen_comb) <- c(stringr::str_c(\"tidyGenR_\", names(genotypes_x)), \"AmpliSAT\")\n\ncomp_gen <-\n  suppressMessages(compare_calls(gen_comb,\n                \"output/comp_gen_noReads.xlsx\",\n                creads = FALSE))\nknitr::kable(comp_gen$dist)\n\n\n\n\nmethod1\nmethod2\ndist_euc\ndist_eucp\n\n\n\n\ntidyGenR_ind_bs16\ntidyGenR_ind_bs0\n47\n0.0205420\n\n\ntidyGenR_ind_bs16\ntidyGenR_pool_bs16\n42\n0.0183566\n\n\ntidyGenR_ind_bs16\ntidyGenR_pool_bs0\n47\n0.0205420\n\n\ntidyGenR_ind_bs16\nAmpliSAT\n74\n0.0323427\n\n\ntidyGenR_ind_bs0\ntidyGenR_pool_bs16\n51\n0.0222902\n\n\ntidyGenR_ind_bs0\ntidyGenR_pool_bs0\n0\n0.0000000\n\n\ntidyGenR_ind_bs0\nAmpliSAT\n29\n0.0126748\n\n\ntidyGenR_pool_bs16\ntidyGenR_pool_bs0\n51\n0.0222902\n\n\ntidyGenR_pool_bs16\nAmpliSAT\n78\n0.0340909\n\n\ntidyGenR_pool_bs0\nAmpliSAT\n29\n0.0126748\n\n\n\n\n\nA plot produced by compare_calls() depicts the differences between strategies. It is useful for spotting potential biases and problematic loci (Figure 3).\n\n\nCode\ncomp_gen$plot2\n\n\n\n\n\nFigure 3: Comparison between genotype calls.\n\n\n\n\nProblematic loci, with low coverage and with conflicting genotypes between different strategies were checked manually by aligning them and compared the with dereplicated reads. Setting band_size = 0 yielded the best results as it recovered alleles which had indels at their ends. Pooling samples did not affect genotype calls, although it has some influence on the number of reads supporting each allele. Thus samples not sharing alleles (i.e. different species) can be genotyped equally efficiently as samples sharing alleles (i.e. same species). Then, the run with band size = 0 and non-pooled samples was chosen as the best strategy and compared pairwise with AmpliSAT.\n\n# compare best call with amplisas\n#   variants\ncomp_gen_sel <-\n  compare_calls(list(tidyGenR_ind_bs0 = genotypes_x$ind_bs0,\n                      AmpliSAT = gen_amplisas),\n                  \"output/comp_gen_indbs0_amplisat.xlsx\",\n                  creads = TRUE)\nsaveRDS(comp_gen_sel, \"output/comp_gen_sel.rds\")\n\n\n\nCode\npcomp1 <- comp_gen_sel$plot2\nggsave(pcomp1,\n       file = \"output/comp_amplisat_indo.pdf\",\n       width = 10,\n       height = 5.4)\npcomp1\n\n\n\n\n\nFigure 4: Comparison of genotype call tidyGenR vs AmpliSAT\n\n\n\n\n\n\nCode\npcomp2 <- comp_gen_sel$plot3\nggsave(pcomp2,\n       file = \"output/comp_amplisat_ind0_boxplot.pdf\",\n       width = 5,\n       height = 3)\npcomp2\n\n\n\n\n\nFigure 5: Comparison of number of reads supporting alleles in tidyGenR vs AmpliSAT.\n\n\n\n\nLastly, the genotypes can be compared against their respective variants to have an idea of variants being dropped when genotyping:\n\n\nCode\ndropped_var <-\n      list(variants = variants_x$ind_bs0,\n            genotypes = genotypes_x$ind_bs0)\ncomp_var_gen <- compare_calls(dropped_var)\nsaveRDS(comp_var_gen, \"output/comp_var_gen.rds\")\ncomp_var_gen$plot1\n\n\n\n\n\nFigure 6: Identified variants dropped during genotyping."
  },
  {
    "objectID": "amplisat_analysis.html",
    "href": "amplisat_analysis.html",
    "title": "Amplicon Genotyping with AmpliSAS",
    "section": "",
    "text": "AmpliSAT was run from a DOCKER container.\nNavigate to directory with F and R reads:\ncd data/intermediate/amplisas/raw-barcoded\nMerge F and R reads:\ndocker run -v $PWD:/workdir --rm sixthresearcher/amplisat ampliMERGE.pl \\\n    -i 1.fastq.gz 2.fastq.gz \\\n    -o merged_reads > amplisas.log\nampliCLEAN.pl seems to collapse due to the large file sizes. For that reason I split the FASTQ files into 10 parts:\nseqkit split -p 10 merged_reads.fq >> amplisas.log\nrm merged_reads.fq\nrm 1.fastq.gz\nrm 2.fastq.gz\nClean merged reads:\ncp ../amplicon-data.csv .\nfor partx in merged_reads.fq.split/*fq\ndo\n  outname=$(echo $partx | sed 's|^.*\\(part.*\\).fq|\\1|')\n  docker run -v $PWD:/workdir --rm sixthresearcher/amplisat ampliCLEAN.pl \\\n      -i $partx \\\n      -mqual 17 \\\n      -min 200 \\\n      -d amplicon-data.csv \\\n      -o filtered_reads_$outname >> amplisas.log\ndone\n\nrm -rf merged_reads.fq.split\nConcatenate split sequences:\ncat filtered_reads_part*fq > filtered_reads.fq\nrm *part_0*fq\nEdit parameters to mimic tidyGenR parameters maf = 0.1 and ad = 10:\ncp amplicon-data.csv amplicon-data_ampliSAS.csv\n\necho \">param,amplicon,value\" >> amplicon-data_ampliSAS.csv\necho \"min_amplicon_seq_depth,all,10\" >> amplicon-data_ampliSAS.csv\necho \"min_amplicon_seq_frequency,all,10\" >> amplicon-data_ampliSAS.csv\nRun amplisSAS:\ndocker run -v $PWD:/workdir --rm sixthresearcher/amplisat ampliSAS.pl \\\n-i filtered_reads.fq \\\n-min 10 \\\n-t Illumina \\\n-d amplicon-data_ampliSAS.csv \\\n-thr 5 \\\n-o results_amplisas > amplisas.log\nRemove intermediate files:\nrm filtered_reads.fq"
  }
]